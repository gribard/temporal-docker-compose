#x-logging: &loki-logging
#  logging:
#    driver: loki
#    options:
#      loki-url: "http://host.docker.internal:3100/loki/api/v1/push"
#      mode: non-blocking
#      max-buffer-size: 4m
#      loki-retries: "3"

services:
  #  loki:
  #    container_name: loki
  #    restart: always
  #    image: grafana/loki:latest
  ##    ports:
  ##      - 3100:3100
  #    command: -config.file=/etc/loki/local-config.yaml
  #    volumes:
  #      - ./deployment/loki/local-config.yaml:/etc/loki/local-config.yaml
  #    depends_on:
  #      - grafana
  #    networks:
  #    - temporal-network

  #  elasticsearch:
  ##    <<: *loki-logging
  #    container_name: temporal-elasticsearch
  #    environment:
  #      - discovery.type=single-node
  #      - ES_JAVA_OPTS=-Xms512m -Xmx512m
  #      - xpack.security.enabled=false
  #    image: elasticsearch:${ELASTICSEARCH_VERSION}
  #    ports:
  #      - published: 9200
  #        target: 9200
  #    networks:
  #       - temporal-network

  postgresql:
    #    <<: *loki-logging
    container_name: temporal-postgresql
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    image: postgres:${POSTGRESQL_VERSION}
    #    expose:
    #      - ${POSTGRES_DEFAULT_PORT}
    volumes:
      - temporal_postgresql_data:/var/lib/postgresql/data
    networks:
      - kamal
      - temporal-network

  temporal-history:
    #    <<: *loki-logging
    container_name: temporal-history
    restart: always
    depends_on:
      - postgresql
    environment:
      - DB=postgres12
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=history
      - PROMETHEUS_ENDPOINT=0.0.0.0:8000
      - ENABLE_ES=false
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - TEMPORAL_CLI_ADDRESS=temporal-nginx:7233
      - TEMPORAL_ADDRESS=temporal-nginx:7233
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    #    ports:
    #      - 7234:7234
    #      - 8888:8000
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - kamal
      - temporal-network

  temporal-matching:
    #    <<: *loki-logging
    container_name: temporal-matching
    restart: always
    depends_on:
      - temporal-history
    environment:
      - DB=postgres12
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=matching
      - PROMETHEUS_ENDPOINT=0.0.0.0:8001
      - ENABLE_ES=false
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - TEMPORAL_CLI_ADDRESS=temporal-nginx:7233
      - TEMPORAL_ADDRESS=temporal-nginx:7233
    image: temporalio/server:${TEMPORAL_VERSION}
    #    ports:
    #      - 7235:7235
    #      - 8001:8001
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - kamal
      - temporal-network

  temporal-frontend:
    #    <<: *loki-logging
    container_name: temporal-frontend
    restart: always
    depends_on:
      - temporal-matching
    environment:
      - DB=postgres12
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=frontend
      - FRONTEND_GRPC_PORT=7237
      - PROMETHEUS_ENDPOINT=0.0.0.0:8002
      - ENABLE_ES=false
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - TEMPORAL_CLI_ADDRESS=temporal-nginx:7233
      - TEMPORAL_ADDRESS=temporal-nginx:7233
    image: temporalio/server:${TEMPORAL_VERSION}
    #    ports:
    #      - 7237:7237
    #      - 8002:8002
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - kamal
      - temporal-network

  temporal-frontend2:
    #    <<: *loki-logging
    container_name: temporal-frontend2
    restart: always
    depends_on:
      - temporal-matching
    environment:
      - DB=postgres12
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=frontend
      - FRONTEND_GRPC_PORT=7236
      - FRONTEND_MEMBERSHIP_PORT=6936
      - PROMETHEUS_ENDPOINT=0.0.0.0:8004
      - ENABLE_ES=false
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - TEMPORAL_CLI_ADDRESS=temporal-nginx:7233
      - TEMPORAL_ADDRESS=temporal-nginx:7233
    image: temporalio/server:${TEMPORAL_VERSION}
    #    ports:
    #      - 7236:7236
    #      - 8004:8004
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - kamal
      - temporal-network

  temporal-worker:
    #    <<: *loki-logging
    container_name: temporal-worker
    restart: always
    depends_on:
      - temporal-nginx
    environment:
      - DB=postgres12
      - DB_PORT=${POSTGRES_DEFAULT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - TEMPORAL_HISTORY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - TEMPORAL_VISIBILITY_NAMESPACEDEFAULT_ARCHIVAL_FILESTORE=enabled
      - SERVICES=worker
      - PROMETHEUS_ENDPOINT=0.0.0.0:8003
      - PUBLIC_FRONTEND_ADDRESS=temporal-nginx:7233
      - TEMPORAL_CLI_ADDRESS=temporal-nginx:7233
      - TEMPORAL_ADDRESS=temporal-nginx:7233
      - ENABLE_ES=false
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/server:${TEMPORAL_VERSION}
    #    ports:
    #      - 7232:7232
    #      - 8003:8003
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - kamal
      - temporal-network

  temporal-admin-tools:
    #    <<: *loki-logging
    container_name: temporal-admin-tools
    restart: always
    depends_on:
      - temporal-nginx
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal-nginx:7233
      - TEMPORAL_ADDRESS=temporal-nginx:7233
    image: temporalio/admin-tools:${TEMPORAL_ADMINTOOLS_VERSION}
    stdin_open: true
    tty: true
    networks:
      - kamal
      - temporal-network

  temporal-ui:
    container_name: temporal-ui
    restart: always
    depends_on:
      - temporal-nginx
    environment:
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
      - TEMPORAL_CSRF_COOKIE_INSECURE=true
      - TEMPORAL_CLI_ADDRESS=temporal-nginx:7233
      - TEMPORAL_ADDRESS=temporal-nginx:7233
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    ports:
      - 8080:8080
    networks:
      - kamal
      - temporal-network

  temporal-nginx:
    #    <<: *loki-logging
    image: nginx:1.22.1
    container_name: temporal-nginx
    restart: unless-stopped
    depends_on:
      - temporal-frontend
      - temporal-frontend2
    ports:
      - 7233:7233
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - kamal
      - temporal-network

  prometheus:
    container_name: prometheus
    restart: unless-stopped
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./deployment/prometheus/config.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    depends_on:
      - temporal-worker
      - cadvisor
    networks:
      - kamal
      - temporal-network

  grafana:
    container_name: grafana
    restart: unless-stopped
    image: grafana/grafana:latest
    build: "./deployment/grafana"
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 8085:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - kamal
      - temporal-network

  #  jaeger-all-in-one:
  #    image: jaegertracing/all-in-one:1.37
  #    restart: always
  ##    ports:
  ##      - 16686:16686
  ##      - 14268:14268
  ##      - 14250:14250
  #    networks:
  #       - temporal-network

  #  otel-collector:
  #    image: otel/opentelemetry-collector:0.47.0
  #    restart: always
  #    command: ["--config=/etc/otel-collector-config.yaml"]
  #    volumes:
  #      - ./deployment/otel/otel-config.yaml:/etc/otel-collector-config.yaml
  ##    ports:
  ##      - 1888:1888
  ##      - 13133:13133
  ##      - 4317:4317
  ##      - 55670:55670
  #    depends_on:
  #      - jaeger-all-in-one
  #    networks:
  #     - temporal-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - kamal
      - temporal-network

  docker_state_exporter:
    image: karugaru/docker_state_exporter
    restart: always
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    networks:
      - kamal
      - temporal-network

  nodeexporter:
    image: prom/node-exporter:latest
    restart: always
    networks:
      - kamal
      - temporal-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/rootfs
    depends_on:
      - cadvisor

networks:
  temporal-network:
    name: temporal-network
    external: true
  kamal:
    name: kamal
    external: true

volumes:
  grafana_data:
  prometheus_data:
  temporal_postgresql_data:
